%% Prettify MATLAB html
% [bottomMargin5] |prettify_MATLAB_html| processes html files generated by MATLAB's |publish| function, adding additional features such as disclosure boxes
% (that can be expanded/collapsed with a mouse-click), and expand-all/collapse-all links that expand/collapse multiple disclosure boxes simultaneously. This
% makes the document more closely resemble "official" MATLAB help files. It also:
%
% * Allows you to easily create internal page links.
% * Provides colour and size formatting options for text.
% * Provides a table style to use when creating tables with html.
% * Automatically enhances the formatting of images and inline code.
% * Allows you to easily create CSS classes and use those classes on elements of the page.
% * Provides the option to apply a "dark" theme to the page.
% 

%% Installation
% [dtls][smry] *Files and folders* [/smry]The main functionality of |prettify_MATLAB_html| is provided in the |prettify_MATLAB_html.m| file. Along with
% this file are the folders _publish overload_ and _prettify documentation_. These folders should be placed in the same folder as |prettify_MATLAB_html.m|.
% [/dtls]
%
% [dtls][smry] *About the _publish overload_ folder* [/smry]This folder contains a single |.m| file: |publish.m| . The folder _publish overload_ should only
% be added to the MATLAB path if you wish to overload the built-in |publish| function. Overloading the |publish| function will automatically process html
% files, generated when you press "Publish" on the toolbar in the Editor, with |prettify_MATLAB_html|.[br5] You can also configure the |publish| overload
% using the [jumpto3] |overloadPublish| function input[/jumpto].[/dtls]
%
% [dtls][smry] *About the _prettify documentation_ folder* [/smry] This folder contains all of the documentation for |prettify_MATLAB_html|. You do not need
% to add it to the MATLAB path, but if it is on the path, that won't cause any problems.[/dtls]
%
% [bottomMargin5][target5] *Adding helper buttons to the Quick-Access Toolbar* [br5] Most of the features of |prettify_MATLAB_html| require the use of
% additional tags in the source |.m| file that is to be published.[br5]To make adding of these tags as easy as possible, you can add buttons to the
% Quick-Access Toolbar. The process of adding the buttons is slightly different depending upon the version of MATLAB you are running. For any version,
% the action only needs to be performed once (buttons are permanently added (can be manually removed) and will remain in place across relaunches of MATLAB).
% [br5]
% <#15 Click here for instructions on how to use these toolbar buttons.>
%
% [dtls][smry] *Adding the Toolbar buttons in MATLAB versions 2018a and later* [/smry] In MATLAB versions *2018a and later*, running
% |prettify_MATLAB_html([],[],[],true)| adds nine buttons to the Quick-Access Toolbar as highlighted in the screenshot below (The Quick-Access Toolbar has 
% been moved from the default location by right-clicking and choosing _Move&nbsp;Toolbar&nbsp;>&nbsp;Below&nbsp;Toolstrip_):[darkAlt][br8][delbr]
% 
% <<favourites.png>>
% 
% [/dtls][br6]
% [dtls][smry] *Adding the Toolbar buttons in MATLAB versions prior to 2018a* [/smry] In MATLAB versions *prior to 2018a*, running 
% |prettify_MATLAB_html([],[],[],true)| adds nine buttons to the Shortcuts Toolbar as shown below:[br8][delbr]
% 
% <<shortcuts.png>>
% 
% [br] *In order to access these shortcuts from the Editor, they must appear in the Quick-Access Toolbar*. You should receive a message at the MATLAB
% command line asking you to restart in order to add the shortcuts to the Quick-Access Toolbar. After a restart, the shortcuts will be in the Quick-Access
% Toolbar as highlighted in the screenshot below (The Quick-Access Toolbar has been moved from the default location by right-clicking and choosing
% _Move&nbsp;Toolbar&nbsp;>&nbsp;Below&nbsp;Toolstrip_):[br8][delbr]
%
% <<shortcutsInQuickAccess.png>>
%
% [/darkAlt][br]If you receive a message asking you to add them manually, you can do so by right-clicking each in turn and selecting 
% _Add&nbsp;to&nbsp;Quick&nbsp;Access&nbsp;Toolbar_ :[br8][delbr]
%
% <<addShortcutToQuickAccess.png>>
%
% [br]Once added to the Toolbar, you may wish to show the labels, by right-clicking on each new button in the Quick-Access Toolbar and selecting 
% _Show&nbsp;Label_:[br8][delbr]
%
% <<showLabelInQuickAccess.png>>
%
% [br] *NOTE* : Currently, the shortcuts are added to the Quick-Access Toolbar by editing MATLAB's xml preference file for the Quick-Access Toolbar.
% MATLAB only reads this file at launch, which is why adding the shortcuts to Quick-Access requires a restart. If anyone knows how to programmatically add
% buttons to the Quick-Access Toolbar in MATLAB versions *prior to 2018a*, please <mailto:harry.dymond@bristol.ac.uk let me know.>[/dtls]
%
% [dtls][smry] *Configure publish overload and add Toolbar buttons with one function call* [/smry] You can configure the |publish| overload and add Toolbar
% buttons with one function call:[br] |prettify_MATLAB_html([], [], true, true)| [/dtls][br]
% [dtls][smry] *Upgrading from an earlier version* [/smry] If you are upgrading to a new version of |prettify_MATLAB_html| that has new buttons for the
% toolbar, and you have already added the Toolbar buttons for the earlier version, you can run |prettify_MATLAB_html([],[],[],true)| and only the new buttons
% will be added.[/dtls][br40]

%% Usage
% There are five valid call syntaxes for |prettify_MATLAB_html| :[br3]
% 1. |prettify_MATLAB_html([jumpto1]inputhtmlFile[/jumpto])| [br3]
% 2. |prettify_MATLAB_html([jumpto1]inputhtmlFile[/jumpto], [jumpto2]verbose[/jumpto])| [br3]
% 3. |prettify_MATLAB_html([], [], [jumpto3]overloadPublish[/jumpto])| [br3]
% 4. |prettify_MATLAB_html([], [], [], [jumpto4]addCommandsToToolbar[/jumpto])| [br3]
% 5. |prettify_MATLAB_html([], [], [jumpto3]overloadPublish[/jumpto], [jumpto4]addCommandsToToolbar[/jumpto])| [br]
%
% [target1][dtls][smry][class.summary-heading] |inputhtmlFile| &nbsp;&mdash;&nbsp; [/class][class.summary-strap]specify the file to be processed[/class][br]
% [class.summary-sub-heading]character vector[/class][/smry]
% The name or full path of the MATLAB-generated html file to be processed. *The file is automatically over-written by the processed file.* [/dtls]
%
% [target2][dtls][smry][class.summary-heading] |verbose| &nbsp;&mdash;&nbsp; [/class][class.summary-strap]control printing of messages to MATLAB command line
% [/class][br][class.summary-sub-heading]logical[/class]
% [/smry] Optional input to suppress the begin and end messages that are printed to the command line when |prettify_MATLAB_html| is run. Set to |false| to
% suppress the messages.[/dtls]
%
% [target3][dtls][smry][class.summary-heading] |overloadPublish| &nbsp;&mdash;&nbsp; [/class][class.summary-strap]automatically process html files when you
% press the publish button[/class][br]
% [class.summary-sub-heading]logical[/class] [/smry] When this input is used, the first two inputs are ignored so can be set to empty. [br] This is an 
% optional input to configure an overload for MATLAB's |publish| function, so that when you press "Publish" in the toolbar of a MATLAB edit window, the
% generated HTML will automatically be processed by |prettify_MATLAB_html|. This only needs to be done once per MATLAB session. If you put a call to:
% [br] |prettify_MATLAB_html([], [], true);| [br]
% in your |startup.m| file, |publish| will get overloaded every time you run MATLAB. set |overloadPublish| to |false| to stop overloading |publish|.[/dtls]
%
% [target4][dtls][smry][class.summary-heading] |addCommandsToToolbar| &nbsp;&mdash;&nbsp; [/class][class.summary-strap]add helper buttons to Quick-Access
% Toolbar[/class][br]
% [class.summary-sub-heading]logical[/class][/smry]
% When this input is used, the first two inputs are ignored so can be set to empty. [br]This is an optional input that when set to _true_, 
% [jumpto5]adds helper buttons to the Quick-Access toolbar[/jumpto]. This action only needs to be performed once (buttons are permanently added (can be
% manually removed) and will remain in place across relaunches of MATLAB)[br5]To leave the |publish| overload setting in its current state, set the third
% input to empty:[br]
% |prettify_MATLAB_html([], [], [], true)|[br5]Alternatively, you can configure the |publish| overload and add Toolbar buttons with one function call:[br]
% |prettify_MATLAB_html([], [], true, true)| [/dtls][br40]

%% Custom elements to use in the source .m file
%
% [dtls][smry] *Markup "tags"* [/smry]
% Most |prettify_MATLAB_html| features require the use of additional markup "tags" in the original source |.m| file, for example to indicate where you want
% the disclosure boxes. You can click on the tag names in the table below to jump to examples of what these tags do and how to use them. If you [jumpto5]add 
% the helper buttons to the Toolbar[/jumpto], you can insert the *[ dtls]*, *[ smry]*, *[ targetn]*, *[ jumpton]*, *[ cssClasses]*, *[ class.class-name]*,
% *[ scalex]*, and *[ colour#]* tags <#15 using those buttons>.[br]
%
% <html>
% <table class="MATLAB-Help">
% <thead><tr>
%    <th style="width:26ch; text-align: center;">Tag(s)</th>
%    <th>Purpose</th>
% </tr></thead>
%    <tr><td style="text-align: center;"><b>[ br]</b></td><td>Place anywhere to introduce an HTML line break.</td></tr>
%    <tr><td style="text-align: center;"><b><a href="#5">[ br<i>x</i>]</a></b></td><td>Insert a line break with specified pixel height <b><i>x</i></b>;
%                                                                     useful for creating spacing between lines where any empty line is too large a gap, or a
%                                                                     large gap is required.
%                                                                     </td></tr>
%    <tr><td style="text-align: center;"><b><a href="#target11">[ bottomMargin<i>x</i>]</a></b></td><td>Specify the size of the bottom margin of the current
%                                                                     paragraph, in pixels <b><i>x</i></b>;
%                                                                     useful for controlling spacing between text and inserted elements such as lists,
%                                                                     images, embedded html, etc.
%                                                                     </td></tr>
%    <tr><td style="text-align: center;"><b><a href="#target12">[ delsp]</a></b></td><td>Control spacing when using <code>publish</code> text markup 
%                                                                     <code>*</code>...<code>*</code> (<b>bold</b>), _..._ (<i>italic</i>), or 
%                                                                     <code>|</code>...<code>|</code> (<code>monospaced</code>). In order to function 
%                                                                     correctly, text that you markup with <code>*</code>, _, or <code>|</code> must often
%                                                                     be preceded by a space, but this can sometimes cause word-spacing issues. To solve this
%                                                                     problem, the <b>[ delsp]</b> tag deletes a space character immediately following this 
%                                                                     tag.</td></tr>   
%    <tr><td style="text-align: center;"><b><a href="#6">[ dtls] ... [ /dtls]</a></b></td>
%        <td>Wrapped around a block of text will create a normally-open disclosure box around that text. These tags must be accompanied by a set of 
%            <b>[ smry]</b> ... <b>[ /smry]</b> tags (see below).</td></tr>
%    <tr><td style="text-align: center;"><b><a href="#6">[ smry] ... [ /smry]</a></b></td>
%        <td>These wrap around text inside a <b>[ dtls] ... [ /dtls]</b> block. The text wrapped in the <b>[ smry]</b> ... <b>[ /smry]</b> block is
%            always displayed, regardless of the state of the disclosure arrow. The opening <b>[ smry]</b> tag must immediately follow the opening 
%            <b>[ dtls]</b> tag.</td></tr>
%    <tr><td style="text-align: center;"><b><a href="#9">[ h2] ... [ /h2]</a><br><a href="#9">[ h2.CElink] ... [ /h2]</a></b></td>
%        <td>Used to create a second-level heading. This is the heading style used by <code>publish</code> for section headings, so these tags enable you to
%            insert headings without starting a new section. If the heading is inserted above [ dtls] boxes, you can choose whether or not the heading
%            includes a collapse/expand link. The <b>[ h2] ... [ /h2]</b> tags create a heading with no link, whilst headings created with 
%            <b>[ h2.CElink] ... [ /h2]</b> tags include a link.</td></tr>
%    <tr><td style="text-align: center;"><b><a href="#10">[ target<i>n</i>]</a></b></td>
%        <td>Where <b><i>n</i></b> is any integer, e.g. <b>[ target1]</b>, <b>[ target14]</b>. Used to insert a link target for in-page linking. A link to
%            the target is created using the <b>[ jumpto<i>n</i>] ... [ /jumpto]</b> tags (see below). Note that no closing tag is required.</td></tr>
%    <tr><td style="text-align: center;"><b><a href="#10">[ jumpto<i>n</i>] ... [ /jumpto]</a></b></td>
%        <td>These wrap around any text that you wish to serve as an in-page link to a target that you have specified with a <b>[ target<i>n</i>]</b> tag.
%        </td></tr>
%    <tr><td style="text-align: center;"><b><a href="#11">[ cssClasses] ... [ /cssClasses]</a></b></td>
%        <td>These wrap around text where you define CSS classes that you wish to apply to other parts of the page using the
%        <b>[ class.<i>class-name</i>] ... [ /class]</b> tags (see below).</td></tr>
%    <tr><td style="text-align: center;"><b><a href="#11">[ class.<i>class-name</i>] ... [ /class]</a></b></td>
%        <td>These wrap around text to which you wish to apply one of your CSS classes that are defined in the  <b>[ cssClasses] ... [ /cssClasses]</b>
%        block.</td></tr>
%    <tr><td style="text-align: center;"><b><a href="#12">[ scale<i>x</i>] ... [ /scale]</a></b></td>
%        <td>Where <i><b>x</b></i> is any positive number, e.g. <b>[ scale0.5]</b>, <b>[ scale1.2]</b>. These wrap around text to which you would like to
%        apply the specified scaling factor.</td></tr>
%    <tr><td style="text-align: center;"><a href="#13"><b>[ colour<i>#</i>] ... [ /colour]</b></a></td>
%        <td>Where <i><b>#</b></i> is a six-digit hexadecimal number specifying the desired colour in RGB, e.g. <b>[ colourFF5614]</b>. These wrap around
%        text to which you would like to apply the specified colour.</td></tr>
%    <tr><td style="text-align: center;"><b><a href="#14">[ themesEnabled]</a></b></td>
%        <td>Place this tag anywhere in your <code>.m</code> file to enable switching between <i>light</i> and <i>dark</i> themes. When enabled, a clickable
%        link is provided at the top-right of the page to allow the user to select a theme (see top of this page for example).</td></tr>
%    <tr><td style="text-align: center;"><b><a href="#14">[ darkAlt] ... [ /darkAlt]</a></b></td>
%        <td>Wrap these around any block that contains one or more images (including images that are auto-generated by code), where you wish to provide an 
%        alternative image in the case where the user selects the <i>dark</i> theme.</td></tr>
% </table>
% </html>
%
% [/dtls]
%
% [dtls][smry] *Pre-defined class for HTML tables* [/smry]
% MATLAB's |publish| allows you to insert html markup into the source |.m| file. One possible use for this is to create an HTML table.
% |prettify_MATLAB_html| defines a table style class in the html file's CSS header, to format tables similarly to those found in "official" MATLAB help
% documents. The style class is called "MATLAB-Help". <#16 Click here to see example usage.> [/dtls][br40]

%% Examples:
% These examples show how to use the tags in the source |.m| file, and show the resulting rendered html once published with MATLAB and subsequently
% processed by |prettify_MATLAB_html|.

%% Control spacing using [ brx], [ bottomMarginx], and [ delsp] tags
% [bottomMargin5]The[jumpto13] *[ brx]*[/jumpto] and[jumpto11] *[ bottomMarginx]*[/jumpto] tags are provided to give extra control over the spacing between
% lines and paragraphs, and [jumpto12] *[ delsp]*[/jumpto] is used to remove unwanted space characters. The *[ brx]* tag is used to specify an exact gap (in
% pixels) to the next line, whilst the *[ bottomMarginx]* tag is used to control the amount of padding added at the end of a paragraph (the default padding 
% for paragraphs produced by the built-in |publish| function is 20 pixels (px)).[br15]
% [target13][scale1.2] *Using the [ brx] tag*[/scale][br10]
% The following source will create two paragraphs (the blank line is interpreted by |publish| as an instruction to start a new paragraph), and the spacing
% between them will be 20px:[br5]
% *Source in* |*.m*| *file:* 
%
%   % |The quick brown fox jumps over the lazy dog.|
%   % 
%   % |How vexingly quick daft zebras jump!|
%
% *Result when converted to html:* [br5]
% |The quick brown fox jumps over the lazy dog.|
%
% |How vexingly quick daft zebras jump!|
%
% [bottomMargin5]A wider or narrower gap can be created by omitting the empty line, and using a *[ brx]* tag at the end of the first line instead. For
% example, make the gap narrower:[br6]
% *Source in* |*.m*| *file:*
%
%   % |The quick brown fox jumps over the lazy dog.| [ br5]
%   % |How vexingly quick daft zebras jump!|
%
% *Result:* [br5]
% |The quick brown fox jumps over the lazy dog.| [br5]
% |How vexingly quick daft zebras jump!|
%
% [bottomMargin5][br5][target11][scale1.2] *Using the [ bottomMarginx] tag*[/scale][br10]
% The *[ bottomMarginx]* tag is particularly useful when wishing to control spacing between text and special elements such as lists, code,
% images, embedded html, etc. The text preceding the inserted elements is contained in a paragraph which will automatically create a 20 pixel gap, and
% ordinarily it would be impossible to make this smaller. For example:[br6]
% *Source in* |*.m*| *file:* 
%
%   % Here is some text preceding a list
%   % 
%   % # Item 1 in list
%   % # Item 2 in list
%
% *Result when converted to html:* [br5]
% Here is some text preceding a list
% 
% # Item 1 in list
% # Item 2 in list
%
% <html>
% <p style="margin-bottom:5px;">You can use the <b>[ bottomMarginx]</b> tag to override the standard margin for the current paragraph (you can even use
% negative numbers if necessary). The tag must appear as the very first item in the paragraph. This means that there must be a blank line immediately
% preceding the <b>[ bottomMarginx]</b> tag, and it should then appear after the line's opening "<code>%</code>" character<sup>*</sup>. For example:[br5]
% <b>Source in <code>.m</code> file:</b></p>
% </html>
%
%   %
%   % [ bottomMargin8]Here is some text preceding a list
%   % 
%   % # Item 1 in list
%   % # Item 2 in list
%
% [bottomMargin5] *Result when converted to html:*
%
% [bottomMargin8]Here is some text preceding a list
% 
% # Item 1 in list
% # Item 2 in list
%
% <html>
% <p style="margin-bottom:5px;"><sup>*</sup>There is one exception to the rule on placement of the <b>[ bottomMarginx]</b> tag: To use it in the opening
% paragraph of a [ dtls] section, it should be placed immediately after the closing <b>[ /smry]</b> tag. For example:[br5]
% <b>Source in <code>.m</code> file:</b></p>
% </html>
%
%   % [ dtls][ smry] Summary text [ /smry][ bottomMargin2]
%   % Text before list
%   % 
%   % # Item 1 in list
%   % # Item 2 in list
%   %
%   % [ /dtls]
%
% [bottomMargin5] *Result when converted to html:*
%
% [dtls][smry] Summary text [/smry][bottomMargin2]
% Text before list
% 
% # Item 1 in list
% # Item 2 in list
%
% [/dtls][br35]
%
% [bottomMargin5][target12][scale1.2] *Using the [ delsp] tag*[/scale][br5]
% The *[ delsp]* tag is useful when using the |publish| markup &#42;...&#42; (*bold*), &#95;...&#95; (_italic_), or &#124;...&#124; (|monospaced|). In order
% to function correctly, this markup often requires a preceding space character. The *[ delsp]* tag can be used to remove this space in the output html, if
% required:[br5]
% *Source in* |*.m*| *file:*
%
%   % |"_if markup is not preceded by a space, it will not work_"|[ br]
%   % |" _markup now works but there is an unwanted space between opening " and first word_"|[ br]
%   % |"[ delsp] _markup works and unwanted space is gone_"|
%
% *Result when converted to html:*[br5]
% |"_if markup is not preceded by a space, it will not work_"|[br]
% |" _markup now works but there is an unwanted space between opening " and first word_"|[br]
% |"[delsp] _markup works and unwanted space is gone_"|
% [br40]

%% Create disclosure boxes using the [ dtls] and [ smry] tags
% [bottomMargin5]Disclosure boxes are boxes that include a _summary_ section that is always visible, and a _details_ section that can be hidden from view.
% The details can be shown/hidden by the user, by clicking anywhere in the _summary_ section.[br5]The boxes are created using the *[ dtls]* and *[ smry]*
% tags, where the *[ dtls]...[ /dtls]* tags wrap around all the content of the box (including the _summary_ section), and the *[ smry]...[ /smry]* tags wrap
% around only the content that you wish to appear in the _summary_ section.[br5]When creating a disclosure box, you must use both *[ dtls]* _and_ *[ smry]*
% tags, and the opening *[ smry]* tag must appear immediately after the opening *[ dtls]* tag.[br5]
% Disclosure boxes can contain text, [jumpto14]images[/jumpto], [jumpto15]inline code and html[/jumpto], and can be [jumpto16]nested[/jumpto].[br10]
% [scale1.2] *Basic example*[/scale][br5]
% *Source in* |*.m*| *file:*
%
%   % [ dtls][ smry] *|.FigureColour|* [ br] &nbsp; &nbsp; _Four-element vector of double_ [ /smry]
%   % This sets the colour of the figure, in normalised RGB.[ /dtls]
% 
% *Result:*[br5]
% [dtls][smry] *|.FigureColour|* [br] &nbsp; &nbsp; _Four-element vector of double_ [/smry] This sets the colour of the figure, in normalised RGB.[/dtls]
%
% [bottomMargin5][target14][scale1.2] *Example with image*[/scale][br5]
% *Source in* |*.m*| *file:*
%
%   % [ dtls][ smry]Here is an svg image[ /smry]
%   %
%   % <<https://www.dropbox.com/s/xxlu0ycmuqjl04x/my_image.svg?raw=1>>
%   %
%   % (free image from <https://www.1001freedownloads.com/download/581454 here>) More text ...[ /dtls]
%
% *Result:*[br5]
% [dtls][smry]Here is an svg image[/smry]
% 
% <<https://www.dropbox.com/s/xxlu0ycmuqjl04x/my_image.svg?raw=1>>
% 
% (free image from <https://www.1001freedownloads.com/download/581454 here>) More text ...[/dtls]
%
% [bottomMargin5][target15][scale1.2] *Example with inline code in the source |.m| file, including code that auto-generates images*[/scale][br5]
% *Source in* |*.m*| *file:*
%
%   % [ dtls][ smry] *In this section, I demonstrate the
%   % rand and surf functions* [ /smry]
%   % Use the rand function to generate a matrix filled
%   % with random numbers in the range [0, 1]:
%
%   rand(3)
%
%   %%
%   % Use the surf function to plot 3-D data:
%
%   surf(peaks)
%
%   %%
%   % [ /dtls]
%
% *Result:*[br5]
% [dtls][smry] *In this section, I demonstrate the
% rand and surf functions* [/smry]
% Use the rand function to generate a matrix filled
% with random numbers in the range [0, 1]:

rand(3)

%%
% Use the surf function to plot 3-D data:[darkAlt]

surf(peaks)

%%
% [/dtls][/darkAlt]
%
% [bottomMargin5][target16][scale1.2] *Example of nested boxes*[/scale][br5]
% It is possible to "nest" disclosure boxes inside other disclosure boxes. For example:[br5]
% *Source in* |*.m*| *file:*
%
%   % [ dtls][ smry] *Parent section* [ /smry]
%   %       here are some words for the parent section[ br10]
%   %       [ dtls][ smry] *Child section 1* [ /smry]
%   %             here are some words for child section 1[ br8]
%   %             [ dtls][ smry] *Grandchild section 1* [ /smry]
%   %                   here are some words for the grandchild section
%   %             [ /dtls][ br8]
%   %             here are some more words for child section 1
%   %       [ /dtls]
%   %       [ dtls][ smry] *Child section 2* [ /smry]
%   %             here are some words for child section 2
%   %       [ /dtls]
%   % [ /dtls]
% 
% *Result:*[br5]
% [dtls][smry] *Parent section* [/smry]
%       here are some words for the parent section[br10]
%       [dtls][smry] *Child section 1* [/smry]
%             here are some words for child section 1[br8]
%             [dtls][smry] *Grandchild section 1* [/smry]
%                   here are some words for the grandchild section
%             [/dtls][br8]
%             here are some more words for child section 1
%       [/dtls]
%       [dtls][smry] *Child section 2* [/smry]
%             here are some words for child section 2
%       [/dtls]
% [/dtls][br40]

%% Create headings using [ h2] tags
% [bottomMargin5] |publish| uses html "[delsp] |&lt;h2&gt;|" tags to denote section headings. When you insert a new section, its heading will appear in the
% page's contents list at the top of the page. You can use the *[ h2]* tags to create a heading without starting a new section, so these headings will not
% appear in the page's contents list.[br5]Additionally, you can select whether or not the heading includes a collapse/expand link (that will affect any
% following [ dtls] boxes). Use a *[ h2]* tag for no link, or a *[ h2.CElink]* tag if you would like to include a link.[br5]
% For example:[br]
% *Source in* |*.m*| *file:*
%
%   % [ h2]Heading text[ /h2]
%   % [ dtls][ smry] *Disclosure box after heading*[ /smry]
%   % box text
%   % [ /dtls]
%
% *Result (note there is no collapse/expand link):* [br5]
% [h2]Heading text[/h2]
% [dtls][smry] *Disclosure box after heading*[/smry]
% box text
% [/dtls]
%
% [bottomMargin5] *Source in* |*.m*| *file:*
%
%   % [ h2.CElink]Heading text[ /h2]
%   % [ dtls][ smry] *Disclosure box after heading*[ /smry]
%   % box text
%   % [ /dtls]
%
% *Result (note the collapse/expand link to the right):* [br5]
% [h2.CElink]Heading text[/h2]
% [dtls][smry] *Disclosure box after heading*[/smry]
% box text
% [/dtls][br40]

%% Create internal page links
% [bottomMargin5]Internal page links allow you to jump to other parts of the current page. To create a link, you need text that will act as the link (to be
% clicked by the user), and a target to jump to. Links are created using the *[ jumpton]* ... *[ /jumpto]* tags, and targets are created using the
% *[ targetn]* tag.[br5]
% For example:[br]
% *Source in* |*.m*| *file:*
%
%   % [ jumpto1]Jump over this blank space:[ /jumpto]
%   % 
%   % <html>
%   % <br style="display:block; content:''; margin-bottom:500px;"><br>
%   % </html>
%   % 
%   % [ target1]Welcome to after the blank space!
%
% *Result:* [br5]
% [jumpto6]Jump over this blank space:[/jumpto]
%
% <html>
% <br style="display:block; content:''; margin-bottom:500px;"><br>
% </html>
%
% [target6]Welcome to after the blank space![br]
%
% [bottomMargin5]If using a *[ targetn]* tag to create an in-page link to a [ dtls] box, you should place the *[ targetn]* tag immediately before the opening
% *[ dtls]* tag, i.e.:
%
%   % [ targetn][ dtls][ smry]summary of details box[ /smry]
%   % contents of details box [ /dtls]
%
% Making page links is particularly easy if you [jumpto5]install the Toolbar buttons[/jumpto]. Then, the _targetn_ button will [jumpto8]automatically 
% number the targets[/jumpto], and the _jumpton_ button will [jumpto9]present a list of valid targets[/jumpto].[br40]

%% Using custom CSS classes
% [bottomMargin5]You can add custom CSS classes using the *[ cssClasses]...[ /cssClasses]* tags, and then apply those classes to other page content using the
% *[ class.class-name]* tag.[br]
% For example:[br]
% *Source in* |*.m*| *file:*
%
%   % [ cssClasses].small-pink { font-size: 80%; color: #FF00FF }
%   % .large-green { font-size: 150%; font-weight: bold; color: #11AA30 } [ /cssClasses]
%   %
%   % [ class.small-pink]This text is styled with small-pink.[ /class]
%   % [ class.large-green]This text is styled with large-green.[ /class]
%
% *Result:* [br5]
% [class.small-pink]This text is styled with small-pink.[/class]
% [class.large-green]This text is styled with large-green.[/class][br20]
%
% [bottomMargin5] *NOTES:*[br]1. You can only have one *[ cssClasses]* block in your |.m| file. This block should contain all the class definitions you wish
% to use.[br]2. You can place the *[ cssClasses]* block anywhere; in the final .html file the CSS classes you define are added to the CSS section at the
% start of the page source. It is recommended that you add the *[ cssClasses]* block either at the end of your |.m| file, or immediately after any
% introduction text in your |.m| file, e.g.:[br] *Source in* |*.m*| *file:*
%
%   %% This is the first line of the .m file, and will be the title
%   % This is introductory text.
%   %
%   % [ cssClasses] define CSS classes here [ /cssClasses]
%   %
%   %% Section 1 heading
%   % section 1 content
%   %
%   %% Section 2 heading
%   % section 2 content
%   %
%
% Applying classes is particularly easy if you [jumpto5]install the Toolbar buttons[/jumpto]. Then, the _class_ button will [jumpto7]present a list of valid
% class names[/jumpto].[br40]

%% Change font size using the [ scalex] tag
% [bottomMargin5]Wrap text whose size you wish to change with the *[ scalex]...[ /scale]* tags, where [class.bold-italic]x[/class] is a positive value. For
% example:[br5] *Source in* |*.m*| *file:*
%
%   % This text is normal. [ scale1.2]This text is larger[ /scale]. [ scale0.8]This text is smaller[ /scale]
%
% *Result:* [br5]
% This text is normal. [scale1.2]This text is larger[/scale]. [scale0.8]This text is smaller[/scale]
%
% [bottomMargin5]To apply scaling to all text in a list, you can enclose the list within *[ scalex]...[ /scale]* tags:[br5]
% *Source in* |*.m*| *file:*
%
%   % [ scale1.2]This text is larger.
%   % 
%   % * And so is
%   % * this list
%   % 
%   % [ /scale]
%
% *Result:* [br5]
% [scale1.2]This text is larger.
% 
% * And so is
% * this list
% 
% [/scale][br40]

%% Change font colour using the [ colour#] tag
% [bottomMargin5]Wrap text whose colour you wish to change with the *[ colour#]...[ /colour]* tags, where [class.bold-italic]#[/class] is a six-digit
% hexadecimal number specifying the colour in RGB. [br]For example:[br]
% *Source in* |*.m*| *file:*
%
%   % [ colourFF0000]This text is red.[ /colour].
%
% *Result:* [br5]
% [colourFF0000]This text is red.[/colour]
%
% [bottomMargin5]To apply colour to all text in a list, you can enclose the list within *[ colour#]...[ /colour]* tags:[br]
% *Source in* |*.m*| *file:*
%
%   % [ colourFF0000]This text is red.
%   % 
%   % * And so is
%   % * this list
%   % 
%   % [ /colour]
%
% *Result:* [br5]
% [colourFF0000]This text is red.
% 
% * And so is
% * this list
% 
% [/colour]
%
% Applying a colour is particularly easy if you [jumpto5]install the Toolbar buttons[/jumpto]. Then, the _colour_ button will [jumpto10]present a
% colour-picker for you to select your desired colour[/jumpto].[br40]

%% More information about themes
% If you enable switching between themes using the *[ themesEnabled]* tag, the page will load in the _light_ theme by default, and the user can switch to the 
% _dark_ theme. If cookies are enabled on the web browser, the user's choice will be remembered the next time the page is loaded.
%
% [bottomMargin5] |prettify_MATLAB_html| provides two CSS classes to easily hide and show items according to the selected theme:
% 
% # show-if-light
% # show-if-dark
% 
% Any item on the page that is assigned to the class "show-if-light" will be displayed if the selected theme is _light_, and hidden if the selected theme is
% _dark_. Conversely, any item on the page that is assigned to the class "show-if-dark" will be displayed if the selected theme is _dark_, and hidden if the
% selected theme is _light_. You can assign items to classes using the [jumpto7] *[ class.class-name]...[ /class]* [/jumpto] tag pair.
%
% For every image that |prettify_MATLAB_html| finds inside a *[ darkAlt] ... [ /darkAlt]* block, it will assign that image to the "show-if-light" class,
% and add an "alternative" image that is assigned to the "show-if-dark" class. The name of this added image will be equal to that of the original image,
% appended by "_dark". For example, if the original image is named "image_01.png", the additional image will be named "image_01_dark.png". When the user
% selects the _light_ theme, "image_01.png" is shown, and when the user selects the _dark_ theme, "image_01_dark.png" is shown.[br40]

%% Adding tags using the Toolbar buttons
% Once buttons have been [jumpto5]added to the Quick-Access Toolbar[/jumpto], they can be used to add *[ dtls]*, *[ smry]*, *[ targetn]*, *[ jumpton]*, 
% *[ cssClasses]* , *[ class.class-name]* , *[ scalex]* , and *[ colour#]* tags to your source |.m| file:
%
% [dtls][smry] *Adding [ dtls] tags* [/smry]
%
% <html>
%   <video controls class="video-demo">
%       <source src="https://www.dropbox.com/s/70pvcq3yfgnffso/dtlsDemo.ogg?raw=1" type="video/ogg">
%       <source src="https://www.dropbox.com/s/6c73vx63txlgssx/dtlsDemo.mp4?raw=1" type="video/mp4">
%       This browser does not support inline video
%   </video>
% </html>
%
% [/dtls]
% [dtls][smry] *Adding [ smry] tags* [/smry]
%
% <html>
%   <video controls class="video-demo">
%       <source src="https://www.dropbox.com/s/as6a5lypqxh6nm2/smryDemo.ogg?raw=1" type="video/ogg">
%       <source src="https://www.dropbox.com/s/wgax03pvb6fqb0s/smryDemo.mp4?raw=1" type="video/mp4">
%       This browser does not support inline video
%   </video>
% </html>
%
% [/dtls]
% [target8][dtls][smry] *Adding [ targetn] tags* [/smry]
%
% <html>
%   <video controls class="video-demo">
%       <source src="https://www.dropbox.com/s/1ai4afjp1cnxe64/targetnDemo.ogg?raw=1" type="video/ogg">
%       <source src="https://www.dropbox.com/s/cx39qnrgqn2saho/targetnDemo.mp4?raw=1" type="video/mp4">
%       This browser does not support inline video
%   </video>
% </html>
%
% [/dtls]
% [target9][dtls][smry] *Adding [ jumpton] tags* [/smry]
%
% <html>
%   <video controls class="video-demo">
%       <source src="https://www.dropbox.com/s/ezr8v179pnquetl/jumptonDemo.ogg?raw=1" type="video/ogg">
%       <source src="https://www.dropbox.com/s/fcymt5p6g2ujg8o/jumptonDemo.mp4?raw=1" type="video/mp4">
%       This browser does not support inline video
%   </video>
% </html>
%
% [/dtls]
% [dtls][smry] *Adding [ cssClasses] tags* [/smry]
%
% <html>
%   <video controls class="video-demo">
%       <source src="https://www.dropbox.com/s/ygsy8vj3sk5mg08/cssClassesDemo.ogg?raw=1" type="video/ogg">
%       <source src="https://www.dropbox.com/s/xgpz1w667bl0dqq/cssClassesDemo.mp4?raw=1" type="video/mp4">
%       This browser does not support inline video
%   </video>
% </html>
%
% [/dtls]
% [target7][dtls][smry] *Adding [ class.class-name] tags* [/smry]
%
% <html>
%   <video controls class="video-demo">
%       <source src="https://www.dropbox.com/s/2yv3cygnto3tnzn/classDemo.ogg?raw=1" type="video/ogg">
%       <source src="https://www.dropbox.com/s/99feo91pa6os87l/classDemo.mp4?raw=1" type="video/mp4">
%       This browser does not support inline video
%   </video>
% </html>
%
% [/dtls]
% [dtls][smry] *Adding [ scalex] tags* [/smry]
%
% <html>
%   <video controls class="video-demo">
%       <source src="https://www.dropbox.com/s/1h0214mu0a3r688/scaleDemo.ogg?raw=1" type="video/ogg">
%       <source src="https://www.dropbox.com/s/f856er1ektv1bap/scaleDemo.mp4?raw=1" type="video/mp4">
%       This browser does not support inline video
%   </video>
% </html>
%
% [/dtls]
% [target10][dtls][smry] *Adding [ colour#] tags* [/smry]
%
% <html>
%   <video controls class="video-demo">
%       <source src="https://www.dropbox.com/s/dhuxziti5f5b12h/colourDemo.ogg?raw=1" type="video/ogg">
%       <source src="https://www.dropbox.com/s/hnlg363d18oxsjk/colourDemo.mp4?raw=1" type="video/mp4">
%       This browser does not support inline video
%   </video>
% </html>
%
% [/dtls]
% [dtls][smry] *Demo of final published page* [/smry]
%
% <html>
%   <video controls class="video-demo">
%       <source src="https://www.dropbox.com/s/76p8fzy1hl2ez63/publishedPageDemo.ogg?raw=1" type="video/ogg">
%       <source src="https://www.dropbox.com/s/m1n4t85qhnd2o07/publishedPageDemo.mp4?raw=1" type="video/mp4">
%       This browser does not support inline video
%   </video>
% </html>
%
% [/dtls][br40]

%% Creating a table with the "MATLAB-Help" style
% [dtls][smry] *Creating a simple table* [/smry][bottomMargin8] *Source in* |*.m*| *file:*
%
%   % <html>
%   % <table class="MATLAB-Help">
%   % <thead><tr>
%   %    <th>Column 1 header</th>
%   %    <th>Column 2 header</th>
%   % </tr></thead>
%   %    <tr><td>one<br>The quick brown fox</td><td>two</td></tr>
%   %    <tr><td>three<br>Jumped over the lazy dog</td><td>four</td></tr>
%   % </table>
%   % </html>
%
% [bottomMargin5] *Result:*
%
% <html>
% <table class="MATLAB-Help">
% <thead><tr>
% <th>Column 1 header</th>
% <th>Column 2 header</th>
% </tr></thead>
% <tr><td>one<br>The quick brown fox</td><td>two</td></tr>
% <tr><td>three<br>Jumped over the lazy dog</td><td>four</td></tr></table>
% </html>
%
% [/dtls]
%
% [dtls][smry] *You can easily control the proportions of the table* [/smry][bottomMargin8] With a little extra html formatting, you can set sizes of the
% table elements. In this case, using |style="width:x%;"| in the |"table"| tag and the first |"th"| tag. [br5] *Source in* |*.m*| *file:*
%
%   % <html>
%   % <table class="MATLAB-Help" style="width:75%;">
%   % <thead><tr>
%   %    <th style="width:65%;">Column 1 header</th>
%   %    <th>Column 2 header</th>
%   % </tr></thead>
%   %    <tr><td>one<br>The quick brown fox</td><td>two</td></tr>
%   %    <tr><td>three<br>Jumped over the lazy dog</td><td>four</td></tr>
%   % </table>
%   % </html>
%
% [bottomMargin5] *Result:*
%
% <html>
% <table class="MATLAB-Help" style="width:75%;">
% <thead><tr>
% <th style="width:65%;">Column 1 header</th>
% <th>Column 2 header</th>
% </tr></thead>
% <tr><td>one<br>The quick brown fox</td><td>two</td></tr>
% <tr><td>three<br>Jumped over the lazy dog</td><td>four</td></tr></table>
% </html>
%
% [/dtls]
% *NOTE:* If you [jumpto5]add the helper buttons to the Toolbar[/jumpto], you can insert a template for this html table style into your |.m| file by
% pressing the _html table_ button.[br40]

%% Automatic enhancements
% [bottomMargin-10]
% 
% # All images are automatically assigned to a CSS class that ensures that they scale with the width of the displayed page.
% # All inline code is set to automatically show a horizontal scrollbar if the page is too narrow to accommodate the text.
% # Uses javascript to make in-page links work in most browsers when page is viewed on MATLAB Central (without this, in-page links do not work in the
% Examples tab on MATLAB Central in most browsers, whether the page is created with |preffity_MATLAB_html| or not).
% # Presents a floating "back" link when a user uses an in-page link, unless the page is viewed in the MATLAB help browser (in that case, the nav pane on the
% left can help). If clicked, the floating "back" link takes the user back to the link that initiated the jump; the user can also just close the "back" link
% if they wish.
% 
% 3 & 4 above apply both to |prettify_MATLAB_html| internal page links, and to those generated automatically by the built-in |publish| (for the page contents
% list).[br5]Try changing the width of this page to see the effects of 1 & 2 above.[br40]

%% Advanced usage
% [dtls][smry] *Closing [ dtls] boxes on page load* [/smry]
% By default, [ dtls] boxes are open when the page first loads. By adding some javascript to the source |.m| file, it is possible to close [ dtls]
% boxes on page load. The required script depends on which boxes you wish to close:
%
% [h2]To close all [ dtls] boxes on the page[/h2]
% Add the following at the end of the |.m| file:[br5]
%
%   %%
%   % <html>
%   % <script>
%   %   var allDetails = document.getElementsByTagName('details');
%   %   toggle_details(0);
%   % </script>
%   % </html>
%
% [br20][h2]To close all [ dtls] boxes in a section of the page[/h2]
% Add the following at the end of the |.m| file:[br5]
%
%   %%
%   % <html>
%   % <script>
%   %   var allDetails = document.getElementsByTagName('details');
%   %   toggle_details([class.bold]x[/class]);
%   % </script>
%   % </html>
%
% [br2]where |*x*| is the section number (an integer), e.g. |toggle_details(4)|. To determine the value of |*x*| for the section of interest, publish the
% page and open the exported html file as text. At the beginning of any section of the page containing [ dtls] boxes, will be the code:[br5]
% [scale0.9] |&lt;p onclick="toggle_details([class.bold]x[/class])" class="collapse-link"&gt;&lt;a href="javascript:void(0);"
% id="Toggle[class.bold]x[/class]"&gt;collapse all&lt;/a&gt;|[/scale][br5]
% where |*x*| is the section number.
%
% [br15][h2]To close individual [ dtls] boxes[/h2]
% Add the following at the end of the |.m| file:[br5]
%
%   %%
%   % <html>
%   % <script>
%   %   var allDetails = document.getElementsByTagName('details');
%   %   document.getElementById('[class.bold]id[/class]').open = false;
%   %   document.getElementById('[class.bold]id[/class]').children[0].setAttribute('style', "border-radius:6px;");
%   % </script>
%   % </html>
%
% [br2]where |*id*| is the identifier for the [ dtls] box, of the form |*x.y*|, where |*x*| and |*y*| are integers e.g. |*1.4*|. Note that |*id*| must be
% surrounded by single quotes. To determine |*id*| for the section of interest, publish the page and open the exported html file as text. At the beginning of
% any [ dtls] box, will be the code:[br5]
% [scale0.9] |&lt;details open onclick="state_check('[class.bold]id[/class]')"  id="[class.bold]id[/class]"&gt;|[/scale][br5]
% where |*id*| is the identifier for the [ dtls] box. To close multiple individual boxes, you can have as many
% |document.getElementById('[class.bold]id[/class]').open = false;| lines as necessary.[br10]
% [/dtls]
% [dtls][smry] *Using "built-in" CSS classes* [/smry][bottomMargin5]html files generated by MATLAB's publish function have a few pre-defined CSS classes
% used to format text. You can apply these classes to any text using the [ class.class-name] tags, but the class names do not appear in the list when using
% the _class_ Toolbar button. The classes are:
% 
% * codeinput
% * codeoutput
% * error
% * keyword
% * comment
% * string
% * untermstring
% * syscmd
%
% [bottomMargin5]When processed by |prettify_MATLAB_html|, the first three of these: *codeinput*, *codeoutput*, and *error*, are applied by wrapping the
% content in html |"&lt;pre&gt;&lt;/pre&gt;"| tags; this is necessary due to the way these classes are defined in html pages produced by the built-in
% |publish| function. This means that all whitespace in the content will be reproduced in the final output. For example:
% [br5] *Source in* |*.m*| *file:*
%
%   % [ class.codeinput]This text will have MATLAB publish's built-in "code input" style applied to it.
%   % [ br]extra spaces           are faithfully reproduced[ /class]
%   % In contrast to this text where extra spaces         are collapsed to a single space.
%
% [bottomMargin5] *Result:*
%
% [class.codeinput]This text will have MATLAB publish's built-in "code input" style applied to it.
% [br]extra spaces           are faithfully reproduced[/class]
% In contrast to this text where extra spaces         are collapsed to a single space.
% [/dtls][br40]

%% More examples
%
% <html>
% To see more examples of usage of <code>prettify_MATLAB_html</code>, you can inspect <a href="matlab:ans=dir(which('prettify_MATLAB_html.m')); open([ans.folder filesep 'prettify documentation' filesep 'prettify_MATLAB_html_helpdoc.m']); clear ans">the source code for this document</a>
% (<b>NOTE</b>: link only works in MATLAB's browser, and only after installation of <code>prettify_MATLAB_html</code>) and also see my other FEX
% submission <code><a href="https://www.mathworks.com/matlabcentral/fileexchange/67740-num2eng">num2eng</a></code>.
% </html>

%%
% <html>
% <script>
%   var allDetails = document.getElementsByTagName('details');
%   document.getElementById('1.4').open = false;
%   document.getElementById('1.4').children[0].setAttribute('style', "border-radius:6px;");
%   document.getElementById('1.5').open = false;
%   document.getElementById('1.5').children[0].setAttribute('style', "border-radius:6px;");
%   toggle_details(8);
% </script>
% </html>
%
% [cssClasses]
% .small-pink  { font-size: 80%; color: #FF00FF; }
% .large-green { font-size: 150%; font-weight: bold; color: #11AA30; } 
% .summary-heading     { font-weight: bold; margin-right: -20px; }
% .summary-sub-heading { font-size: 95%; font-weight: bold; font-style: italic; padding: 2px 15px 0px; display: inline-block; color: #505050; }
% .summary-strap       { font-weight: bold; display: inline-block; margin-left: 20px; }
% .not-italic          { font-style: normal; }
% .bold-italic   { font-weight: bold; font-style: italic; }
% .bold          { font-weight: bold; }
% .video-demo    { display:block; max-height:576px; max-width:100%; margin-left:auto; margin-right:auto; }[/cssClasses][themesEnabled][frameBuffer150]
